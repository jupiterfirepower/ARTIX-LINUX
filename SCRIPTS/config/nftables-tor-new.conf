#!/usr/sbin/nft -f

flush ruleset

define ni = "eno2"
define tor_user = "tor"
define cur_user = "jupiter"

## WireGuard listen port
define wg_port = 51820

table inet filter {
    chain forward {
        type filter hook forward priority filter; policy drop
    }
    chain input {
        type filter hook input priority filter; policy drop

        iif $ni tcp flags != syn ct state new drop

        #iifname $ni tcp flags & (syn | fin) == (syn | fin) drop
        #iifname $ni tcp flags \& \(fin\|syn\|rst\|psh\|ack\|urg\) == 0 drop
        #iifname $ni tcp flags \& \(all\) ==  \(none\) drop
        #iifname $ni tcp flags \& \(fin\|syn\|rst\|psh\|ack\|urg\)  \<  fin drop

        # Permit all established connections
        # accept all packets that are part of an already-established connection
        ct state established,related accept comment "Permit established/related connections"

        # Permit all loopback
        iif lo accept comment "Permit all traffic via loopback interface"
        iif lo ip saddr != 127.0.0.0/8 drop

        # Tor Browser
        iif lo tcp dport 8118-9050 tcp sport 1-65000 accept

        # accept all WireGuard packets received on a public interface
        # iif $ni udp dport $wg_port accept

        iif $ni udp length 28-32 drop
        iif $ni ip saddr 10.0.0.0/8 drop
        iif $ni ip saddr 172.16.0.0/12 drop
        iif $ni ip saddr 192.168.0.0/16 drop
        iif $ni ip saddr 224.0.0.0/4 drop
        iif $ni ip daddr 224.0.0.0/4 ip protocol != udp drop
        iif $ni ip saddr 240.0.0.0/5 drop
        iif $ni ip saddr 127.0.0.0/8 drop
        iif $ni ip saddr 255.255.255.255 drop
        iif $ni ip daddr 255.255.255.255 drop
        iif $ni ip saddr 169.254.0.0/16 drop
        iif $ni ip saddr 0.0.0.0/8 drop
        iif $ni ip daddr 0.0.0.0/8 drop

        iif $ni tcp flags fin,syn / fin,syn drop
        iif $ni tcp flags syn,rst / syn,rst drop
        iif $ni tcp flags fin,rst / fin,rst drop
        iif $ni tcp flags fin / fin,ack drop
        iif $ni tcp flags psh / psh,ack drop
        iif $ni tcp flags urg / ack,urg drop
        iif $ni tcp flags & (fin | syn | rst | psh | ack | urg) < fin drop
        iif $ni tcp flags fin,psh,urg / fin,syn,rst,psh,ack,urg drop
        iif $ni tcp flags fin,syn,rst,ack / fin,syn,rst,psh,ack,urg drop
        iif $ni tcp flags fin,syn,rst,psh,ack,urg / fin,syn,rst,psh,ack,urg drop
        iif $ni tcp flags fin,syn,rst,ack,urg / fin,syn,rst,psh,ack,urg drop
        iif $ni tcp flags fin / fin,syn,rst,psh,ack,urg drop
        iif $ni tcp flags rst / fin,syn,rst,ack drop

        iif $ni icmp type { echo-reply, destination-unreachable, time-exceeded } limit rate 1/second accept
        iif $ni icmp type { source-quench, redirect, echo-request, parameter-problem } drop
        iif $ni icmp type { timestamp-request, timestamp-reply, info-request, info-reply } drop
        iif $ni icmp type { router-advertisement, router-solicitation, address-mask-request, address-mask-reply } drop

        # Drop invalid connection state traffic
        iif $ni ct state invalid,untracked log prefix "Invalid-Input: " level info flags all drop comment "Drop traffic with invalid connection state"

        log prefix "Dropped:  " flags all drop comment "non-LAN gets dropped brusquely"
    }
    chain output {
        type filter hook output priority filter; policy drop

        # Permit all established connections
        ct state established,related accept comment "Permit established/related connections"

        # Permit all loopback
        oif lo accept comment "Permit all traffic via loopback interface"
        oif lo ip daddr != 127.0.0.0/8 drop

        # Drop invalid connection state traffic
        ct state invalid log flags all prefix "OUT - Invalid: " drop comment "Drop traffic with invalid connection state"

        # Allow SHH, HTTP and HTTPS
        tcp dport { ssh, http, https } ct state new accept comment "Permit outbound SHH, HTTP and HTTPS"

        # Allow IPv4 DNS queries to DNS servers
        udp dport domain accept comment "Permit outbound IPv4 UDP DNS"
        tcp dport domain accept comment "Permit outbound IPv4 TCP DNS"

        # Allow outbound NTP
        udp dport ntp accept comment "Permit outbound NTP"

        # Allow SMTP
        # tcp sport { 25, 465, 587, 943 } log prefix "nft smtp4: " accept

        ## Permit outbound WireGuard traffic before dropping connections with bad state
        #oif $ni udp sport $wg_port \
        #counter \
        #accept \
        #comment "Permit WireGuard outbound traffic"

        ## Permit outbound traceroute UDP ports but limit to 500 PPS
        udp dport 33434-33524 \
        limit rate 500/second \
        counter \
        accept \
        comment "Permit outbound UDP traceroute limited to 500 PPS"

        # Tor browser
        oif $ni tcp dport 1-65000 tcp sport 8118-9050 accept
        oif lo  meta skuid $tor_user accept
        oif $ni meta skuid $tor_user accept
        oif lo  meta skuid $cur_user accept

        oif $ni icmp type { destination-unreachable, echo-request, time-exceeded } limit rate 1/second accept
        oif $ni icmp type { echo-reply, source-quench, redirect, parameter-problem } drop
        oif $ni icmp type { timestamp-request, timestamp-reply, info-request, info-reply } drop
        oif $ni icmp type { router-advertisement, router-solicitation, address-mask-request, address-mask-reply } drop

        # Drop invalid connection state traffic
        oif $ni ct state invalid,untracked log prefix "Invalid-Output: " level info flags all drop comment "Drop traffic with invalid connection state"

        ## Log any unmatched traffic but rate limit logging to a maximum of 60 messages/minute
        ## The default policy will be applied to unmatched traffic
        limit rate 60/minute burst 100 packets \
        log prefix "OUT - Drop: " comment "Log any unmatched traffic"

        ## Count the unmatched traffic
        counter comment "Count any unmatched traffic"
    }
}

table inet mangle {
        chain prerouting {
                type filter hook prerouting priority -150;

                # CT INVALID
                ct state invalid counter drop

                # TCP SYN (CT NEW)
                tcp flags & (fin|syn|rst|ack) != syn \
                ct state new \
                counter drop
       }
}
